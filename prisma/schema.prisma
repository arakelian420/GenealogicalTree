// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tree {
  id           String         @id @default(cuid())
  name         String
  description  String?
  isLocked     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  people       Person[]
  relationships Relationship[]
  rootPersonId String?
  userId       String
  user         User           @relation(fields: [userId], references: [id])

  @@unique([id, userId])
}

model Person {
  id                String         @id @default(cuid())
  firstName         String
  lastName          String
  fatherName        String?
  birthDate         String?
  deathDate         String?
  birthPlace        String?
  occupation        String?
  notes             String?
  gender            Gender?
  photo             String?
  nickname          String?
  currentPlace      String?
  facebookUrl       String?
  color             String?
  treeId            String
  tree              Tree           @relation(fields: [treeId], references: [id])
  relationshipsFrom Relationship[] @relation("RelationshipFrom")
  relationshipsTo   Relationship[] @relation("RelationshipTo")
  documents         Document[]
  x                 Int?
  y                 Int?
  width             Int?
  height            Int?
}

model Relationship {
  id           String           @id @default(cuid())
  type         RelationshipType
  fromPersonId String
  toPersonId   String
  treeId       String
  tree         Tree             @relation(fields: [treeId], references: [id])
  fromPerson   Person           @relation("RelationshipFrom", fields: [fromPersonId], references: [id])
  toPerson     Person           @relation("RelationshipTo", fields: [toPersonId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([fromPersonId, toPersonId, type, treeId])
}

enum Gender {
  male
  female
  other
}

enum RelationshipType {
  parent_child
  spouse
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  personId  String
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  trees         Tree[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
